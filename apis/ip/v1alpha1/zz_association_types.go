// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssociationInitParameters struct {

	// DHCP unique identifier for IPv6.
	Duid *string `json:"duid,omitempty" tf:"duid,omitempty"`

	// The flag which defines if the host record is to be used for IPAM purposes.
	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	// This value must point to the ID of the appropriate allocation resource. Required on resource creation.
	InternalID *string `json:"internalId,omitempty" tf:"internal_id,omitempty"`

	// MAC address of a cloud instance.
	MacAddr *string `json:"macAddr,omitempty" tf:"mac_addr,omitempty"`
}

type AssociationObservation struct {

	// DHCP unique identifier for IPv6.
	Duid *string `json:"duid,omitempty" tf:"duid,omitempty"`

	// The flag which defines if the host record is to be used for IPAM purposes.
	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// This value must point to the ID of the appropriate allocation resource. Required on resource creation.
	InternalID *string `json:"internalId,omitempty" tf:"internal_id,omitempty"`

	// MAC address of a cloud instance.
	MacAddr *string `json:"macAddr,omitempty" tf:"mac_addr,omitempty"`

	// NIOS object's reference, not to be set by a user.
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`
}

type AssociationParameters struct {

	// DHCP unique identifier for IPv6.
	// +kubebuilder:validation:Optional
	Duid *string `json:"duid,omitempty" tf:"duid,omitempty"`

	// The flag which defines if the host record is to be used for IPAM purposes.
	// +kubebuilder:validation:Optional
	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	// This value must point to the ID of the appropriate allocation resource. Required on resource creation.
	// +kubebuilder:validation:Optional
	InternalID *string `json:"internalId,omitempty" tf:"internal_id,omitempty"`

	// MAC address of a cloud instance.
	// +kubebuilder:validation:Optional
	MacAddr *string `json:"macAddr,omitempty" tf:"mac_addr,omitempty"`
}

// AssociationSpec defines the desired state of Association
type AssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AssociationInitParameters `json:"initProvider,omitempty"`
}

// AssociationStatus defines the observed state of Association.
type AssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Association is the Schema for the Associations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infoblox}
type Association struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssociationSpec   `json:"spec"`
	Status            AssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssociationList contains a list of Associations
type AssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Association `json:"items"`
}

// Repository type metadata.
var (
	Association_Kind             = "Association"
	Association_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Association_Kind}.String()
	Association_KindAPIVersion   = Association_Kind + "." + CRDGroupVersion.String()
	Association_GroupVersionKind = CRDGroupVersion.WithKind(Association_Kind)
)

func init() {
	SchemeBuilder.Register(&Association{}, &AssociationList{})
}
