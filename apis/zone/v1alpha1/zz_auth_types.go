// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthInitParameters struct {

	// Comment for the zone; maximum 256 characters.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The Extensible attributes of the zone, as a map in JSON format
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	// The name of this DNS zone. For a reverse zone, this is in 'address/cidr' format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// The name server group that serves DNS for this zone.
	NsGroup *string `json:"nsGroup,omitempty" tf:"ns_group,omitempty"`

	// Restarts the member service.
	RestartIfNeeded *bool `json:"restartIfNeeded,omitempty" tf:"restart_if_needed,omitempty"`

	// The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.
	SoaDefaultTTL *float64 `json:"soaDefaultTtl,omitempty" tf:"soa_default_ttl,omitempty"`

	// This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful. The default is one week.
	SoaExpire *float64 `json:"soaExpire,omitempty" tf:"soa_expire,omitempty"`

	// The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for 'Does Not Respond' responses.
	SoaNegativeTTL *float64 `json:"soaNegativeTtl,omitempty" tf:"soa_negative_ttl,omitempty"`

	// This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.
	SoaRefresh *float64 `json:"soaRefresh,omitempty" tf:"soa_refresh,omitempty"`

	// This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.
	SoaRetry *float64 `json:"soaRetry,omitempty" tf:"soa_retry,omitempty"`

	// The name of the DNS view in which the zone resides. Example: 'external'
	View *string `json:"view,omitempty" tf:"view,omitempty"`

	// Determines the format of this zone. Valid values are: FORWARD, IPV4, IPV6; the default is FORWARD
	ZoneFormat *string `json:"zoneFormat,omitempty" tf:"zone_format,omitempty"`
}

type AuthObservation struct {

	// Comment for the zone; maximum 256 characters.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The Extensible attributes of the zone, as a map in JSON format
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	// The name of this DNS zone. For a reverse zone, this is in 'address/cidr' format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InternalID *string `json:"internalId,omitempty" tf:"internal_id,omitempty"`

	// The name server group that serves DNS for this zone.
	NsGroup *string `json:"nsGroup,omitempty" tf:"ns_group,omitempty"`

	// NIOS object's reference, not to be set by a user.
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`

	// Restarts the member service.
	RestartIfNeeded *bool `json:"restartIfNeeded,omitempty" tf:"restart_if_needed,omitempty"`

	// The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.
	SoaDefaultTTL *float64 `json:"soaDefaultTtl,omitempty" tf:"soa_default_ttl,omitempty"`

	// This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful. The default is one week.
	SoaExpire *float64 `json:"soaExpire,omitempty" tf:"soa_expire,omitempty"`

	// The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for 'Does Not Respond' responses.
	SoaNegativeTTL *float64 `json:"soaNegativeTtl,omitempty" tf:"soa_negative_ttl,omitempty"`

	// This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.
	SoaRefresh *float64 `json:"soaRefresh,omitempty" tf:"soa_refresh,omitempty"`

	// This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.
	SoaRetry *float64 `json:"soaRetry,omitempty" tf:"soa_retry,omitempty"`

	// The name of the DNS view in which the zone resides. Example: 'external'
	View *string `json:"view,omitempty" tf:"view,omitempty"`

	// Determines the format of this zone. Valid values are: FORWARD, IPV4, IPV6; the default is FORWARD
	ZoneFormat *string `json:"zoneFormat,omitempty" tf:"zone_format,omitempty"`
}

type AuthParameters struct {

	// Comment for the zone; maximum 256 characters.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The Extensible attributes of the zone, as a map in JSON format
	// +kubebuilder:validation:Optional
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	// The name of this DNS zone. For a reverse zone, this is in 'address/cidr' format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.
	// +kubebuilder:validation:Optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// The name server group that serves DNS for this zone.
	// +kubebuilder:validation:Optional
	NsGroup *string `json:"nsGroup,omitempty" tf:"ns_group,omitempty"`

	// Restarts the member service.
	// +kubebuilder:validation:Optional
	RestartIfNeeded *bool `json:"restartIfNeeded,omitempty" tf:"restart_if_needed,omitempty"`

	// The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.
	// +kubebuilder:validation:Optional
	SoaDefaultTTL *float64 `json:"soaDefaultTtl,omitempty" tf:"soa_default_ttl,omitempty"`

	// This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful. The default is one week.
	// +kubebuilder:validation:Optional
	SoaExpire *float64 `json:"soaExpire,omitempty" tf:"soa_expire,omitempty"`

	// The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for 'Does Not Respond' responses.
	// +kubebuilder:validation:Optional
	SoaNegativeTTL *float64 `json:"soaNegativeTtl,omitempty" tf:"soa_negative_ttl,omitempty"`

	// This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.
	// +kubebuilder:validation:Optional
	SoaRefresh *float64 `json:"soaRefresh,omitempty" tf:"soa_refresh,omitempty"`

	// This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.
	// +kubebuilder:validation:Optional
	SoaRetry *float64 `json:"soaRetry,omitempty" tf:"soa_retry,omitempty"`

	// The name of the DNS view in which the zone resides. Example: 'external'
	// +kubebuilder:validation:Optional
	View *string `json:"view,omitempty" tf:"view,omitempty"`

	// Determines the format of this zone. Valid values are: FORWARD, IPV4, IPV6; the default is FORWARD
	// +kubebuilder:validation:Optional
	ZoneFormat *string `json:"zoneFormat,omitempty" tf:"zone_format,omitempty"`
}

// AuthSpec defines the desired state of Auth
type AuthSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthInitParameters `json:"initProvider,omitempty"`
}

// AuthStatus defines the observed state of Auth.
type AuthStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Auth is the Schema for the Auths API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infoblox}
type Auth struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fqdn) || (has(self.initProvider) && has(self.initProvider.fqdn))",message="spec.forProvider.fqdn is a required parameter"
	Spec   AuthSpec   `json:"spec"`
	Status AuthStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthList contains a list of Auths
type AuthList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Auth `json:"items"`
}

// Repository type metadata.
var (
	Auth_Kind             = "Auth"
	Auth_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Auth_Kind}.String()
	Auth_KindAPIVersion   = Auth_Kind + "." + CRDGroupVersion.String()
	Auth_GroupVersionKind = CRDGroupVersion.WithKind(Auth_Kind)
)

func init() {
	SchemeBuilder.Register(&Auth{}, &AuthList{})
}
